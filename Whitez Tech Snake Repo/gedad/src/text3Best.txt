import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class App extends Application {

    private static final int CANVAS_WIDTH = 400;
    private static final int CANVAS_HEIGHT = 400;
    private static final int BLOCK_SIZE = 10;
    private static final int FOOD_SIZE = 10;
    private static final int INITIAL_SNAKE_SIZE = 3;
    private static final int INITIAL_SNAKE_X = CANVAS_WIDTH / 2;
    private static final int INITIAL_SNAKE_Y = CANVAS_HEIGHT / 2;
    private static final int MAX_FOOD_X = CANVAS_WIDTH - FOOD_SIZE;
    private static final int MAX_FOOD_Y = CANVAS_HEIGHT - FOOD_SIZE;
    private static final Random random = new Random();

    private Canvas canvas;
    private GraphicsContext gc;
    private List<Block> snake;
    private Block food;
    private boolean running = false;

    @Override
    public void start(Stage primaryStage) {
        canvas = new Canvas(CANVAS_WIDTH, CANVAS_HEIGHT);
        gc = canvas.getGraphicsContext2D();
        snake = new ArrayList<>();
        for (int i = 0; i < INITIAL_SNAKE_SIZE; i++) {
            snake.add(new Block(INITIAL_SNAKE_X, INITIAL_SNAKE_Y + i * BLOCK_SIZE));
        }
        spawnFood();

        Button startButton = new Button("Start");
        startButton.setOnAction(event -> {
            if (!running) {
                startGame();
            }
        });

        Button restartButton = new Button("Restart");
        restartButton.setOnAction(event -> {
            restartGame();
        });

        HBox buttonBox = new HBox(10, startButton, restartButton);
        buttonBox.setAlignment(Pos.CENTER);

        VBox root = new VBox(10, canvas, buttonBox);
        root.setAlignment(Pos.CENTER);

        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void startGame() {
        running = true;
        new Thread(() -> {
            while (running) {
                update();
                draw();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    private void restartGame() {
        running = false;
        snake.clear();
        for (int i = 0; i < INITIAL_SNAKE_SIZE; i++) {
            snake.add(new Block(INITIAL_SNAKE_X, INITIAL_SNAKE_Y + i * BLOCK_SIZE));
        }
        spawnFood();
        draw();
    }

    private void update() {
        Block head = snake.get(0);
        int dx = 0;
        int dy = 0;
        if (head.direction == Direction.LEFT) {
            dx = -BLOCK_SIZE;
        } else if (head.direction == Direction.RIGHT) {
            dx = BLOCK_SIZE;
        } else if (head.direction == Direction.UP) {
            dy = -BLOCK_SIZE;
        } else if (head.direction == Direction.DOWN) {
            dy = BLOCK_SIZE;
        }
        int newX = head.x + dx;
        int newY = head.y + dy;
        if (newX < 0 || newX >= CANVAS_WIDTH || newY < 0 || newY >= CANVAS_HEIGHT) {
            running = false;
            return;
        }
        for (int i = 1; i < snake.size(); i++) {
            if (newX == snake.get(i).x && newY == snake.get(i).y) {
                running = false;
                return;
            }
        }
        if (newX == food.x && newY == food.y) {
            snake.add(0, new Block(newX, newY));
            spawnFood();
        } else {
            for (int i = snake.size() - 1; i > 0; i--) {
                Block prevBlock = snake.get(i - 1);
                snake.get(i).x = prevBlock.x;
                snake.get(i).y = prevBlock.y;
                snake.get(i).direction = prevBlock.direction;
            }
            head.x = newX;
            head.y = newY;
        }
    }

    private void draw() {
        gc.setFill(Color.WHITE);
        gc.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
        gc.setFill(Color.BLACK);
        for (Block block : snake) {
            gc.fillRect(block.x, block.y, BLOCK_SIZE, BLOCK_SIZE);
        }
        gc.setFill(Color.RED);
        gc.fillRect(food.x, food.y, FOOD_SIZE, FOOD_SIZE);
        gc.setFill(Color.BLACK);
        gc.setFont(new Font(24));
        gc.fillText("Score: " + (snake.size() - INITIAL_SNAKE_SIZE), 10, 30);
    }

    private void spawnFood() {
        boolean validPosition = false;
        while (!validPosition) {
            int x = random.nextInt(MAX_FOOD_X / BLOCK_SIZE) * BLOCK_SIZE;
            int y = random.nextInt(MAX_FOOD_Y / BLOCK_SIZE) * BLOCK_SIZE;
            validPosition = true;
            for (Block block : snake) {
                if (block.x == x && block.y == y) {
                    validPosition = false;
                    break;
                }
            }
            if (validPosition) {
                food = new Block(x, y);
            }
        }
    }

    private static class Block {
        int x;
        int y;
        Direction direction = Direction.LEFT;

        Block(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    private enum Direction {
        LEFT, RIGHT, UP, DOWN
    }

    public static void main(String[] args) {
        launch(args);
    }

}
